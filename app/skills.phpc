<?php
require_once 'html5.phpc';
require_once 'skillLevel.phpc';

// @title and span/text() are dynamic value
// <dd class='hide-children'>
//   <span class="active-period">
//     <span class="dtstart" title="1999-01">1999-01</span>
//     <span class="dtend" title="2011-10">2011-10</span>
//   </span>
//   <span class="level" title="5/5">5</span>
//   <span class="tag" title="Java">Java</span>
// </dd>
class skill extends dd
{
  private $Label = null; // visible text
  private $FacetList = array(); // list of facet describing the skill (allow for later filtering)
  private $DateList = array(); // when did the skill was used. Can be several period of time
  private $Level = 0; // what is user's current level in this skill
  private $DEBUG = null;

  private $OUTPUT = null;

  function setLabel($value)
  {
    $this->Label = $value;
  }
  function getLabel()
  {
    return $this->Label;
  }

  function setFaceList($value)
  {
    $this->FaceList = $value;
  }
  function getFaceList()
  {
    return $this->FaceList;
  }

  function addSkillProperty($class="no-class", $title="no-title", $content="no-content", $tag = 'span')
  {
    $id = $this->getIdFrom( $title );
//     $this->DEBUG->dump( $id );
    $property = new $tag(); // Variable function (see: http://php.net/manual/en/functions.variable-functions.php)
//     $this->DEBUG->dump($property);
      $property->setClass($class);
//       $property->setTitle($title);
      $property->setContent($content);

    switch($tag)
    {
      case 'meter':
        $property->setTitle(null);
        $property->resetContent();
          $level = new skillLevel($title);
          $property->addChild( $level->addScale() );
      break;
      default:
        $property->setId( $id );
      ;
    }
    return $property->buildOutput();
  }

// @param
//   period = item 1 is start date, item 2 is end date.
  function setPeriod($period)
  {// add start and end element to parent node

    $periodContainer = new span();
      $periodContainer->setClass('period');
      // START time of skill usage
      $periodContainer->addChild( $this->addSkillProperty("dtstart", $period[0], $period[0]) );
      // separator: –
      $periodContainer->addChild( $this->addSkillProperty(null, null, '&ndash;' ));
      // END time of skill usage
      $periodContainer->addChild( $this->addSkillProperty("dtend", $period[1], $period[1]) );

//         echo $periodContainer->buildOutput()."[periodContainer]";
    return $periodContainer->buildOutput();
  }



// @param
//   activePeriod = (array of) active periods
  function setActivePeriod($activePeriod)
  {// item 1 is start date, item 2 is end date
    $result = null;
    $periodSeparator = ', ';
    $skillTerminator = '&thinsp;; ';
    $periodTerminator = '&thinsp;; ';

    if ( is_array($activePeriod[0]) )
    {
      $allPeriodContainer = new span();
        $allPeriodContainer->setClass('all-period');
          // typo: period{non-breakable space}{colunm}{space}
          $allPeriodContainer->addChild( $this->addSkillProperty(null, null, sprintf('%s&nbsp;: ', _cv('period')) ));

      $periodCount = count($activePeriod);
      for ($i = 0 ; $i < $periodCount ; $i++) // foreach skip first item WTH!!!
      {// There is a list of active periods
        $period = $activePeriod[$i];
        {// pass each array as argument to setPeriod
          $periodSeparator = ($i < $periodCount-1) ? $periodSeparator : $periodTerminator;
          // we use a wrapper when there is more than one period of activity related to the skill
          $allPeriodContainer->addChild( sprintf("%s%s", $this->setPeriod($period), $periodSeparator) );
        }
      }
      $result .= $allPeriodContainer->buildOutput();
    } else
    {// only one period
      $result .= sprintf("%s%s", $this->setPeriod($activePeriod), $periodSeparator);
    }

    return $skillTerminator.$result;
  }

  function buildOutput($content = null)
  {
    return $this->getOutput();
  }

  function setOutput($value)
    { $this->OUTPUT = $value; }
  function getOutput()
    { return $this->OUTPUT; }

  function setPunctuation($currentItem, $totalItems)
  {
    echo parent::setPunctuation($currentItem, $totalItems);
  }


//   @param
//     label = name of the skill
//     facetlist = (array of) facet attributes
//     activePeriod = (array of) active period for this skill
//     level = skill proficiency from 1 to 5
  function __construct($label = "[missing label]", $facetlist = null, $activePeriod = null, $level = -1, $last = false)
  {
    // DEBUGAGE
    $this->DEBUG = new toolbox();

    $facetlist[] = 'hide-children'; // add a class to hide children span

    $skill = new dd();
      $skill->setClass( implode(' ', $facetlist) );
      // Skill name/label used as a tag
      $skill->addChild( $this->addSkillProperty('tag', $label, sprintf("%s", $label) ) );

    $skillDetail = new detail();
        $skillDetail->setClass('skill-detail');
        // set all active periods for the skill
        $skillDetail->addChild( $this->setActivePeriod($activePeriod) );
        // typo: {space}STRING{non-breakable-Space}{comma}{space}
        $skillDetail->addChild( $this->addSkillProperty('label', null, sprintf('%s&nbsp;: ', _cv('level')) ));
        // Level/Profieciency in skill
        $skillDetail->addChild( $this->addSkillProperty('level', $level, $level, 'meter') );

// var_dump($skill->buildOutput());
    if ($last) {
        $skill->addChild( $skillDetail->buildOutput() .'.');
    } else {
        $skill->addChild( $skillDetail->buildOutput() .', ');
    }

    $this->setOutput($skill->buildOutput());

    return $skill->buildOutput();
  }
}

?>